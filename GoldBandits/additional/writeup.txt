So this is a fun problem, but I would consider it a harder problem. First, you need to find all shortest paths from node 1 to 2. To do this, you can first run a shortest path algorithm in reverse to get the distance that each node is from 2. Then, with that knowledge, you can brute force with backtracking to find all shortest paths, checking at each step that your distance plus the distance left to the end makes sense and confirms that you are still on a shortest path. With all shortest paths from 1 to 2 found, you can, for each of them, suppose taking all nodes (villages) on that path to get the max value of that path; then run a shortest path algorithm in reverse again from end to start to enforce that you can get home, but while minimuzung the villages you need to not take to leave yourself a path home. To do that, you need to update the graph to have all 0 edges except for those edges going into a node along the path.